// Generated by CoffeeScript 1.6.3
(function() {
  var a, div, renderable, templates, text, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = window.teacup, div = _ref.div, text = _ref.text, a = _ref.a, renderable = _ref.renderable;

  templates = {
    dashboard: renderable(function() {
      return div(".dashboard", function() {
        div(".dashboard__header", function() {
          return a(".dashboard__header-title", {
            href: "/"
          }, function() {
            return text("DeplOrgy");
          });
        });
        return div(".dashboard__container");
      });
    })
  };

  define(["View", "View__Navigation"], function(_arg, View__Navigation) {
    var View, View__Dashboard;
    View = _arg.View;
    View__Dashboard = (function(_super) {
      __extends(View__Dashboard, _super);

      View__Dashboard.ROUTES = {
        "#login": "View__Login",
        "#navigation": "View__Navigation",
        "#pullrequests": "View__PullRequests"
      };

      function View__Dashboard() {
        this.goto_view_from_url = __bind(this.goto_view_from_url, this);
        this.$container = null;
        return;
      }

      View__Dashboard.prototype.render = function() {
        this.$el = $(templates.dashboard());
        this.$container = this.$el.find(".dashboard__container");
      };

      View__Dashboard.prototype.toggle_header = function(should_show) {
        this.$el.find(".dashboard__header").toggle(should_show);
      };

      View__Dashboard.prototype.goto_view_from_url = function() {
        var hash, re, regexp, view, _ref1;
        hash = window.location.hash;
        _ref1 = View__Dashboard.ROUTES;
        for (re in _ref1) {
          view = _ref1[re];
          regexp = new RegExp(re);
          if (regexp.test(hash)) {
            CDB.broadcast("request_view_change", view, {
              push_url: false
            });
            return;
          }
        }
        CDB.broadcast("request_view_change", "View__Navigation");
      };

      View__Dashboard.prototype.setup_handlers = function() {
        var _this = this;
        CDB.listen("request_url_change", function(url) {
          history.pushState({}, "", url);
        });
        CDB.listen("request_view_change", function(view_name, _arg1) {
          var push_url, view_args, _ref1;
          _ref1 = _arg1 != null ? _arg1 : {}, push_url = _ref1.push_url, view_args = _ref1.view_args;
          if (push_url == null) {
            push_url = true;
          }
          if (view_args == null) {
            view_args = [];
          }
          require([view_name], function(view_klass) {
            _this.$container.html((function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(view_klass, view_args, function(){}).content());
            _this.toggle_header(!view_klass.fullscreen);
            if (push_url) {
              history.pushState({}, "", view_klass.url);
            }
          });
        });
        $(window).on("hashchange popstate", this.goto_view_from_url);
      };

      View__Dashboard.prototype.post_setup = function() {
        if ($.cookie("user_auth_token")) {
          this.goto_view_from_url();
        } else {
          CDB.broadcast("request_view_change", "View__Login");
        }
      };

      return View__Dashboard;

    })(View);
    return View__Dashboard;
  });

}).call(this);
