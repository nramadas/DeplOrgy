// Generated by CoffeeScript 1.6.3
(function() {
  var DiffCompiler, DiffFile, DiffFn, diff_compiler_template, diff_file_template, diff_fn_line, diff_fn_template, diff_viewer_template, div, renderable, text, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = window.teacup, div = _ref.div, text = _ref.text, renderable = _ref.renderable;

  diff_fn_line = function(content, line_num, m_cls) {
    if (m_cls == null) {
      m_cls = "";
    }
    return div(".diff-fn-line" + m_cls, function() {
      div(".diff-fn-line__line-num", function() {
        return text(line_num);
      });
      return div(".diff-fn-line__content", function() {
        return text(content);
      });
    });
  };

  diff_fn_template = renderable(function(title, lhs, rhs) {
    return div(".diff-fn.standard-view", function() {
      div(".diff-fn__title.standard-view__subtitle", function() {
        return text(title);
      });
      return div(".diff-fn__diff-text", function() {
        div(".diff-fn__lhs", function() {
          var line, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = lhs.length; _i < _len; _i++) {
            line = lhs[_i];
            _results.push(diff_fn_line(line.content, line.line_num, line.m_cls));
          }
          return _results;
        });
        return div(".diff-fn__rhs", function() {
          var line, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = rhs.length; _i < _len; _i++) {
            line = rhs[_i];
            _results.push(diff_fn_line(line.content, line.line_num, line.m_cls));
          }
          return _results;
        });
      });
    });
  });

  diff_file_template = renderable(function(comparison) {
    return div(".diff-file.standard-view", function() {
      div(".diff-file__comparison.standard-view__title", function() {
        return text(comparison);
      });
      return div(".diff-file__fn-container");
    });
  });

  diff_compiler_template = renderable(function() {
    return div(".diff", function() {
      return div(".diff__container");
    });
  });

  diff_viewer_template = renderable(function() {
    return div(".diff-viewer");
  });

  DiffFn = (function() {
    function DiffFn() {
      this._lines = [];
      this._fn_title = "";
      this._lhs_current_line_num = 0;
      this._rhs_current_line_num = 0;
      this._lhs_lines = [];
      this._rhs_lines = [];
      return;
    }

    DiffFn.prototype.add_line = function(line) {
      this._lines.push(line);
    };

    DiffFn.prototype.finish = function() {
      var lhs_buffer, lhs_buffer_length, line, num, rhs_buffer, rhs_buffer_length, _i, _j, _k, _len, _ref1;
      lhs_buffer = [];
      rhs_buffer = [];
      _ref1 = this._lines;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        line = _ref1[_i];
        switch (line[0]) {
          case "@":
            this.comprehend_title(line);
            break;
          case "-":
            lhs_buffer.push(this.make_line(line, this._lhs_current_line_num, ".m-lhs"));
            this._lhs_current_line_num++;
            break;
          case "+":
            rhs_buffer.push(this.make_line(line, this._rhs_current_line_num, ".m-rhs"));
            this._rhs_current_line_num++;
            break;
          default:
            lhs_buffer_length = lhs_buffer.length;
            rhs_buffer_length = rhs_buffer.length;
            if (lhs_buffer_length || rhs_buffer_length) {
              if (lhs_buffer_length > rhs_buffer_length) {
                for (num = _j = rhs_buffer_length; rhs_buffer_length <= lhs_buffer_length ? _j < lhs_buffer_length : _j > lhs_buffer_length; num = rhs_buffer_length <= lhs_buffer_length ? ++_j : --_j) {
                  rhs_buffer.push(this.make_line(""));
                }
              } else {
                for (num = _k = lhs_buffer_length; lhs_buffer_length <= rhs_buffer_length ? _k < rhs_buffer_length : _k > rhs_buffer_length; num = lhs_buffer_length <= rhs_buffer_length ? ++_k : --_k) {
                  lhs_buffer.push(this.make_line(""));
                }
              }
              this._lhs_lines = this._lhs_lines.concat(lhs_buffer);
              this._rhs_lines = this._rhs_lines.concat(rhs_buffer);
            }
            this._lhs_lines.push(this.make_line(line, this._lhs_current_line_num));
            this._rhs_lines.push(this.make_line(line, this._rhs_current_line_num));
            this._lhs_current_line_num++;
            this._rhs_current_line_num++;
            lhs_buffer = [];
            rhs_buffer = [];
        }
      }
      if (lhs_buffer.length) {
        this._lhs_lines = this._lhs_lines.concat(lhs_buffer);
      }
      if (rhs_buffer.length) {
        this._rhs_lines = this._rhs_lines.concat(rhs_buffer);
      }
    };

    DiffFn.prototype.comprehend_title = function(title_text) {
      var lhs_line_nums, line_num_components, line_nums, rhs_line_nums, title_components;
      title_components = title_text.split("@@");
      line_nums = title_components[1];
      line_num_components = line_nums.split(" ");
      lhs_line_nums = line_num_components[1];
      rhs_line_nums = line_num_components[2];
      this._lhs_current_line_num = parse_int(lhs_line_nums.split(",")[0].slice(1));
      this._rhs_current_line_num = parse_int(rhs_line_nums.split(",")[0].slice(1));
      this._fn_title = title_components[2] || "in file:";
    };

    DiffFn.prototype.make_line = function(line_text, line_num, m_cls) {
      if (line_num == null) {
        line_num = "";
      }
      if (m_cls == null) {
        m_cls = "";
      }
      return {
        content: line_text.slice(1),
        line_num: line_num,
        m_cls: m_cls
      };
    };

    DiffFn.prototype.content = function() {
      return $(diff_fn_template(this._fn_title, this._lhs_lines, this._rhs_lines));
    };

    return DiffFn;

  })();

  DiffFile = (function() {
    function DiffFile() {
      this._lines = [];
      this._comparison = "";
      this._index = "";
      this._lhs_file = "";
      this._rhs_file = "";
      this._diff_fns = [];
      return;
    }

    DiffFile.prototype.add_line = function(line) {
      this._lines.push(line);
    };

    DiffFile.prototype.finish = function() {
      var current_diff_fn, index, line, _i, _len, _ref1;
      current_diff_fn = null;
      _ref1 = this._lines;
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        line = _ref1[index];
        switch (index) {
          case 0:
            this._comparison = line;
            break;
          case 1:
            this._index = line;
            break;
          case 2:
            this._lhs_file = line;
            break;
          case 3:
            this._rhs_file = line;
            break;
          default:
            if (line.slice(0, 2) === "@@") {
              this.complete_diff_fn(current_diff_fn);
              current_diff_fn = new DiffFn();
            }
            if (current_diff_fn != null) {
              current_diff_fn.add_line(line);
            }
        }
      }
      this.complete_diff_fn(current_diff_fn);
    };

    DiffFile.prototype.complete_diff_fn = function(diff_fn) {
      if (!diff_fn) {
        return;
      }
      this._diff_fns.push(diff_fn);
      diff_fn.finish();
    };

    DiffFile.prototype.content = function() {
      var $container, $el, fn, _i, _len, _ref1;
      $el = $(diff_file_template(this._comparison));
      $container = $el.find(".diff-file__fn-container");
      _ref1 = this._diff_fns;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        fn = _ref1[_i];
        $container.append(fn.content());
      }
      return $el;
    };

    return DiffFile;

  })();

  DiffCompiler = (function() {
    function DiffCompiler(diff_text) {
      this._diff_files = [];
      this.organize_diff(diff_text);
      return;
    }

    DiffCompiler.prototype.organize_diff = function(diff_text) {
      var current_diff, diff_lines_array, line, _i, _len;
      diff_lines_array = diff_text.split("\n");
      current_diff = null;
      for (_i = 0, _len = diff_lines_array.length; _i < _len; _i++) {
        line = diff_lines_array[_i];
        if (line.slice(0, 4) === "diff") {
          this.complete_diff(current_diff);
          current_diff = new DiffFile();
        }
        if (current_diff != null) {
          current_diff.add_line(line);
        }
      }
      this.complete_diff(current_diff);
      console.log(this._diff_files);
    };

    DiffCompiler.prototype.complete_diff = function(diff_file) {
      if (!diff_file) {
        return;
      }
      this._diff_files.push(diff_file);
      diff_file.finish();
    };

    DiffCompiler.prototype.content = function() {
      var $container, $el, file, _i, _len, _ref1;
      $el = $(diff_compiler_template());
      $container = $el.find(".diff__container");
      _ref1 = this._diff_files;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        file = _ref1[_i];
        $container.append(file.content());
      }
      return $el;
    };

    return DiffCompiler;

  })();

  define(["view"], function(_arg) {
    var View, View__Diff;
    View = _arg.View;
    View__Diff = (function(_super) {
      __extends(View__Diff, _super);

      View__Diff.url = "/#diff";

      function View__Diff(diff) {
        View__Diff.__super__.constructor.apply(this, arguments);
        this.diff = null;
        this.organize_diff(diff);
        return;
      }

      View__Diff.prototype.organize_diff = function(diff) {
        this.diff = new DiffCompiler(diff);
      };

      View__Diff.prototype.render = function() {
        this.$el = $(diff_viewer_template());
        this.$el.append(this.diff.content());
      };

      return View__Diff;

    })(View);
    return View__Diff;
  });

}).call(this);
